version()
version(R-base)
R.version()
R.Version
R.Version()
help(par)
q()
q()
library(coin)
library("coin", lib.loc="D:/Program Files/R/R-3.1.2/library")
RoundingTimes <- data.frame(
times = c(5.40, 5.50, 5.55,
5.85, 5.70, 5.75,
5.20, 5.60, 5.50,
5.55, 5.50, 5.40,
5.90, 5.85, 5.70,
5.45, 5.55, 5.60,
5.40, 5.40, 5.35,
5.45, 5.50, 5.35,
5.25, 5.15, 5.00,
5.85, 5.80, 5.70,
5.25, 5.20, 5.10,
5.65, 5.55, 5.45,
5.60, 5.35, 5.45,
5.05, 5.00, 4.95,
5.50, 5.50, 5.40,
5.45, 5.55, 5.50,
5.55, 5.55, 5.35,
5.45, 5.50, 5.55,
5.50, 5.45, 5.25,
5.65, 5.60, 5.40,
5.70, 5.65, 5.55,
6.30, 6.30, 6.25),
methods = factor(rep(c("Round Out", "Narrow Angle", "Wide Angle"), 22)),
block = factor(rep(1:22, rep(3, 22))))
RoundingTimes
example(wilcoxsign_test)
install.packages('multcomp')
example(wilcoxsign_test)
q()
install.packages("vcd")
library(vcd)
install.packages("vcd")
library(vcd)
mytable <- xtabs(~Treatment + Improved,data=Arthritis)
print(mytable)
mytable
summary(mytable)
install.packages('xlsx')
library("xlsx", lib.loc="D:/Program Files/R/R-3.1.2/library")
install.packages('rjava')
install.packages('rJava')
install.packages('xlsx')
library("xlsx", lib.loc="D:/Program Files/R/R-3.1.2/library")
library(rJava)
install.packages('rJava')
library(xlsx)
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
install.packages(c("boot", "class", "cluster", "codetools", "colorspace", "digest", "foreign", "ggplot2", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "multcomp", "nlme", "nnet", "plyr", "psych", "Rcpp", "rpart", "sandwich", "spatial", "survival", "zoo"))
library('xlsx')
install.packages('rJava')
library(rJava)
help(p.adjust)
help(p.adjust)
p <- rep(0.05,10)
p
p.adjust(p)
p <- seq(from = 0.0001,to = 0.08,by = 0.0001)
p.adjust(p)
p.adjust(p,method = 'fdr')
p <- seq(from = 0.001,to = 0.08,by = 0.001)
p
p.adjust(p,method = 'fdr')
p[0] <- 0.0001
p.adjust(p,method = 'fdr')
p[0] <- 0.000000001
p.adjust(p,method = 'fdr')
p
p[1] <- 0.000000001
p.adjust(p,method = 'fdr')
p <- c(0.007,0.05,0.4,0.5)
p.adjust(p,method = 'fdr')
p <- c(0.007,0.05,0.4,0.5,rep(0.4,10))
p
p.adjust(p,method = 'fdr')
p <- c(0.002,rep(0.4,20))
p.adjust(p,method = 'fdr')
p <- c(0.002,rep(0.05,20))
p.adjust(p,method = 'fdr')
help(p.adjust)
q()
pval <- seq(from = 0.0001,to = 0.1,by = 0.01)
pval
p.adjust(pval)
pval <- seq(from = 0.0001,to = 0.1,by = 0.001)
p.adjust(pval)
pval <- seq(from = 0.0001,to = 0.01,by = 0.001)
p.adjust(pval)
pval
length(pval)
seq1 <- 1:10
seq1
seq1/10
seq1/10*0.05
p.adjust(pval) < seq1/10*0.05
p.adjust(pval)
pvalue <- c(0.17
0.19
0.047
0.041
0.04
0.05
0.04
0.216
0.015
0.056
0.062
0.132
0.023
0.007322
0.086631
0.068
0.0046
0.141217
0.4694
0.13511
0.2532
0.214
0.042
)
pvalue <- c(0.17
0.19
0.047
0.041
0.04
0.05
0.04
0.216
0.015
0.056
0.062
0.132
0.023
0.007322
0.086631
0.068
0.0046
0.141217
0.4694
0.13511
0.2532
0.214
0.042)
pvalue <- c(0.17,0.19,0.047,0.041,0.04,0.05,0.04,0.216,0.015,0.056,0.062,0.132,0.023,0.007322,0.086631,0.068,0.0046,0.141217,0.4694,0.13511,0.2532,0.214,0.042)
pvalue
p.adjust(pvalue)
order(pvalue)
pvalue[order(pvalue)]
pvalue[order(pvalue)]-> pvalue_new
p.adjust(pvalue_new)
?file.copy
load("~/R_study/mypkg/data/e.rda")
setwd('GitHub/Myhub/Rbf/')
dir()
mydata<- data.frame(Eglob = numeric(0),gamma = numeric(0),lambda = numeric(0),theta = numeric(0));
mydata <- edit(mydata)
mydata <- c(0.510944653
0.487428215
0.51158968
0.478601748
0.485892634
0.527132751
0.489163546
0.496213067
0.495963379
0.474386184
0.476208906
0.452913025
0.430520183
0.42670412
0.471052851
0.460316271
)
mydata <- c(0.510944653    0.487428215	0.51158968	0.478601748	0.485892634	0.527132751	0.489163546	0.496213067	0.495963379	0.474386184	0.476208906	0.452913025	0.430520183	0.42670412	0.471052851	0.460316271
)
mydata <- c(0.510944653    0.487428215	0.51158968	0.478601748	0.485892634	0.527132751	0.489163546	0.496213067	0.495963379	0.474386184	0.476208906	0.452913025	0.430520183	0.42670412	0.471052851	0.460316271)
mydata <- c(0.510944653 0.487428215	0.51158968	0.478601748	0.485892634	0.527132751	0.489163546	0.496213067	0.495963379	0.474386184	0.476208906	0.452913025	0.430520183	0.42670412	0.471052851	0.460316271)
install.packages('RODBC')
library(RODBC)
library(xlsx)
install.packages('xlsx')
library(xlsx)
library(rjava)
library(rJava)
library(rJava)
Sys.setenv(JAVA_HOME='D:././Program Files (x86)/java/')
library(xlsx)
library(rJava)
Sys.setenv(JAVA_HOME='D:./././Program Files (x86)/java/bin/')
library(rJava)
Sys.setenv(JAVA_HOME='C:./././Program Files/Java/jre1.8.0_45/')
library(rJava)
library(xlsx)
help(package = xlsx)
getwd()
rm(list = ls())
mydata <- read.xlsx(file = 'global_variables_cost.xlsx',1)
mydata
?system.file
dir()
wb <- loadWorkbook('global_variables_cost.xlsx')
str(wb)
sheets <- getSheets(wb)
str(sheets)
summary(sheets)
sheets
sheets[[2]]
sheets[[1]]
sheets[[1]] ->sheet
.jmethods(sheet)
sheet$getWorkbook()
sheet$getSheetName()
sheet$getRow()
sheet$getLastRowNum()
wb <- loadWorkbook('globalVariables.xls')
sheets <- getSheets(wb)
sheets
length(sheets)
sheet1 <- sheets[[1]]
sheet1
sheet1$getPhysicalNumberOfRows()
sheet1$getCellComment(cell = 1)
sheet1$getCellComment()
getRows(sheet1,2)
getRows(sheet1,2) ->row2
str(row2)
row2$2
row2
rows <- getRows(sheet1)
rows$1
getCells(rows)
getCells(rows)->cells
structure(cells)
cells[1]
cells[[2]]
cells[[1]]
class(cells)
cells[[1]]
getCellValue(cells[1])
getCellValue(cells)
getCellValue(cells[[1]])
getCellValue(cells[[2]])
getCellValue(cells[[23]])
cells
cells$1.2
class(cells)
wb
sheets
length(sheets)
mydata <- read.xlsx2('globalVariables.xls',2)
mydata
library(coin)
source('permute_test.R')
mydata
oneway_test(efficiency_bin~group,data = mydata,distribution = 'exact')
mydata
mydata$efficiency_bin
help(oneway_test)
oneway_test(efficiency_bin ~ group,data = mydata,distribution = 'exact')
t.test(efficiency_bin ~ group,data = mydata)
str(mydata)
mydata$efficiency_bin->value
str(value)
value1 <- as.numeric(value)
str(value1)
source('permute_test.R')
results
str(results)
results[[1]]
summary(results)
results@statistic@teststatistic
results@estimates
results@nullvalue
results@distribution@pvalue
results@distribution@p
results@distribution@name
print(results)
print(results) -> tt
str(tt)
pvalue(results)
source('permute_test.R')
source('permute_test.R')
source('permute_test.R')
source('permute_test.R')
mydata
rm(list = ls())
source('permute_test.R')
source('permute_test.R')
source('permute_test.R')
mydata
source('permute_test.R')
source('permute_test.R')
source('permute_test.R')
source('permute_test.R')
ls
ls()
mydata
mydata_tmp
source('permute_test.R')\
source('permute_test.R')
source('permute_test.R')
source('permute_test.R')
mydata
mydata_tmp
as.numeric(mydata$efficiency_bin)
mydata$efficiency_bin
getwd()
numeric(mydata$efficiency_bin)
is.numeric(mydata$efficiency_bin)
source('permute_test.R')
mydata
str(mydata)
mydata_tmp
help(read.xlsx2)
source('permute_test.R')
mydata
mydata_tmp
str(mydata_tmp)
oneway_test(efficiency_bin~group,data = mydata,distribution = 'exact')
oneway_test(efficiency_bin~group,data = mydata_tmp,distribution = 'exact')
ls()
source('permute_test.R')
sheets[[21]]
sheet <- sheets[[21]]
getCells(sheet)
sheet
help(getCells)
getRows(sheet)
getRows(sheet) -> rows
row <- rows[1]
row
getCells(row)
source('permute_test.R')
source('permute_test.R')
source('permute_test.R')
ls()
cost
source('permute_test.R')
help(save)
source('permute_test.R')
pval
p.adjust(pval)
source('permute_test_sm.R')
mydata
str(mydata)
help(read.xlsx2)
str(mydata)
source('permute_test_sm.R')
ls()
rm(list = ls())
source('permute_test_sm.R')
mydata
source('permute_test_sm.R')
mydata
source('permute_test_sm.R')
final_re
p.adjust(final_re$pval_3)
p.adjust(final_re$pval_3/2)
